{"version":3,"sources":["assets/logo.svg","pages/ReactTemplate/ReactTemplate.styles.ts","pages/ReactTemplate/ReactTemplate.tsx","pages/Main/Main.styles.ts","components/LinkButton/LinkButton.styles.ts","components/LinkButton/LinkButton.tsx","pages/Main/Main.tsx","pages/MapDemo/MapDemo.tsx","pages/VRDemo/VRDemo.tsx","pages/Dashboard/Dashboard.tsx","components/App/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Container","styled","div","spin","keyframes","AppLogo","img","AppHeader","header","AppLink","a","ReactTemplate","src","logo","alt","href","target","rel","StyledButton","button","LinkButton","children","route","rest","history","useHistory","onClick","path","push","Main","MapDemo","VRDemo","Dashboard","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sHAAAA,EAAOC,QAAU,IAA0B,kC,k8BCEpC,IAAMC,EAAYC,IAAOC,IAAV,KAITC,EAAOC,YAAH,KASJC,EAAUJ,IAAOK,IAAV,IAGLH,GAIFI,EAAYN,IAAOO,OAAV,KAWTC,EAAUR,IAAOS,EAAV,K,iBCZLC,EAjBiB,WAC9B,OACE,kBAACX,EAAD,KACE,kBAACO,EAAD,KACE,kBAACF,EAAD,CAASO,IAAKC,IAAMC,IAAI,SACxB,oIAIA,kBAACL,EAAD,CAASM,KAAK,sBAAsBC,OAAO,SAASC,IAAI,uBAAxD,kB,4KCVD,IAAMjB,EAAYC,IAAOC,IAAV,K,mRCAf,IAAMgB,EAAejB,IAAOkB,OAAV,KCgBVC,EAXqB,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,SAAUC,EAAqB,EAArBA,MAAUC,EAAW,oCAC9DC,EAAUC,cAEhB,OAEE,kBAACP,EAAD,eAAcQ,QAAS,kBAHJC,EAG4BL,EAHLE,EAAQI,KAAKD,GAArC,IAACA,IAGwCJ,GACxDF,ICEQQ,EAZQ,WACrB,OACE,kBAAC,EAAD,KACE,yCACA,kBAAC,EAAD,CAAYP,MAAM,cAAlB,aACA,kBAAC,EAAD,CAAYA,MAAM,YAAlB,YACA,kBAAC,EAAD,CAAYA,MAAM,WAAlB,WACA,kBAAC,EAAD,CAAYA,MAAM,aAAlB,kBCLSQ,EAJW,WACxB,OAAO,8CCGMC,EAJU,WACvB,OAAO,6CCGMC,EAJa,WAC1B,OAAO,+CC6BMC,EAxBO,WACpB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAON,KAAK,cACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,WACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,YACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,aACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,KACV,kBAAC,EAAD,UCbUO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCXnCC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4148ddf4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import styled, { keyframes } from 'styled-components';\n\nexport const Container = styled.div`\n  text-align: center;\n`;\n\nexport const spin = keyframes`\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n`;\n\nexport const AppLogo = styled.img`\n  height: 40vmin;\n  pointer-events: none;\n  animation: ${spin} infinite 20s linear;\n  user-select: none;\n`;\n\nexport const AppHeader = styled.header`\n  background-color: #282c34;\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  font-size: calc(10px + 2vmin);\n  color: white;\n`;\n\nexport const AppLink = styled.a`\n  color: #61dafb;\n`;\n","import React from 'react';\nimport { Container, AppHeader, AppLogo, AppLink } from './ReactTemplate.styles';\nimport logo from '../../assets/logo.svg';\n\nconst ReactTemplate: React.FC = () => {\n  return (\n    <Container>\n      <AppHeader>\n        <AppLogo src={logo} alt=\"logo\" />\n        <p>\n          This page should be removed in the near future. It is still here just to have one extra\n          test route :P\n        </p>\n        <AppLink href=\"https://reactjs.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Learn React\n        </AppLink>\n      </AppHeader>\n    </Container>\n  );\n};\n\nexport default ReactTemplate;\n","import styled from 'styled-components';\n\n// eslint-disable-next-line\nexport const Container = styled.div`\n  max-width: 680px;\n  display: flex;\n  flex-direction: column;\n  margin: auto;\n  padding: 20px;\n`;\n","import styled from 'styled-components';\n\n// eslint-disable-next-line\nexport const StyledButton = styled.button`\n  font-size: 18px;\n  font-weight: bold;\n  border: none;\n  color: white;\n  background-color: #3167ff;\n  padding: 20px 30px;\n  border-radius: 6px;\n  cursor: pointer;\n  margin-bottom: 12px;\n`;\n","import React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { StyledButton } from './LinkButton.styles';\n\ninterface Props extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  route: string;\n}\n\nconst LinkButton: React.FC<Props> = ({ children, route, ...rest }) => {\n  const history = useHistory();\n  const handleClick = (path: string): void => history.push(path);\n  return (\n    // eslint-disable-next-line\n    <StyledButton onClick={(): void => handleClick(route)} {...rest}>\n      {children}\n    </StyledButton>\n  );\n};\n\nexport default LinkButton;\n","import React from 'react';\nimport { Container } from './Main.styles';\nimport LinkButton from '../../components/LinkButton';\n\nconst Main: React.FC = () => {\n  return (\n    <Container>\n      <h1>Main page</h1>\n      <LinkButton route=\"/dashboard\">Dashboard</LinkButton>\n      <LinkButton route=\"/mapdemo\">Map Demo</LinkButton>\n      <LinkButton route=\"/vrdemo\">VR Demo</LinkButton>\n      <LinkButton route=\"/template\">Old Template</LinkButton>\n    </Container>\n  );\n};\n\nexport default Main;\n","import React from 'react';\n\nconst MapDemo: React.FC = () => {\n  return <h1>Map demo page</h1>;\n};\n\nexport default MapDemo;\n","import React from 'react';\n\nconst VRDemo: React.FC = () => {\n  return <h1>VR Demo page</h1>;\n};\n\nexport default VRDemo;\n","import React from 'react';\n\nconst Dashboard: React.FC = () => {\n  return <h1>Dashboard page</h1>;\n};\n\nexport default Dashboard;\n","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport ReactTemplate from '../../pages/ReactTemplate';\nimport Main from '../../pages/Main';\nimport MapDemo from '../../pages/MapDemo';\nimport VRDemo from '../../pages/VRDemo';\nimport Dashboard from '../../pages/Dashboard';\n\nconst App: React.FC = () => {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/dashboard\">\n          <Dashboard />\n        </Route>\n        <Route path=\"/vrdemo\">\n          <VRDemo />\n        </Route>\n        <Route path=\"/mapdemo\">\n          <MapDemo />\n        </Route>\n        <Route path=\"/template\">\n          <ReactTemplate />\n        </Route>\n        <Route path=\"/\">\n          <Main />\n        </Route>\n      </Switch>\n    </Router>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}